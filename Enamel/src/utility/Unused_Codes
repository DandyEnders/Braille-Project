/**
	 * This method checks if a phrase of a line of String is well-defined (
	 * correctly written ) returns true if the phrase follows the file format,
	 * returns false if the phrase does not.
	 * 
	 * @author ScenarioParser Writer ( Used his / her list of if statements /
	 *         comments )
	 * @author Jinho Hwang
	 * 
	 * @param fileLine
	 *            a phrase to test if it satisfy file format
	 * @return Pair<String, String>
	 * 			First String is type of legal phrase ( Ex : sound, skip, repeat...)
	 * 			Second String is argument of legal phrase (Ex : voice.wav, GOHERE, 1, 2...)
	 * 			Second String can be a null if the legal phrase do not have any argument to take.
	 * 			(Ex. First String = user-input, second String = null because user-input don't take an arg.
	 * 
	 * @return Pair<String, String>
	 * 			If the given line input is not syntactically correct, ( not well-formed ) then, 
	 * 			both first and second String is null. 
	 * 			First String is null if and only if the given argument is incorrect.
	 * 			
	 */
	private static ArrayList<String> isPhraseListCorrect(String fileLine) {

		ArrayList<String> answerPair = null;

		
		
		

		// The key phrase to indicate to play a sound file.
		if (fileLine.length() >= 8 && fileLine.substring(0, 8).equals("/~sound:")) {
			// command = sound 
			// arg = audio file name
			answerPair.add("sound");
			answerPair.add(fileLine.substring(8, fileLine.length()));
		}
		// The key phrase to indicate to skip to another part of the
		// scenario.
		else if (fileLine.length() >= 7 && fileLine.substring(0, 7).equals("/~skip:")) 
			// command = skip
			// arg = 
			answerPair.add("skip");
			answerPair.add(fileLine.substring(7, fileLine.length()));
		}
		// The key phrase to indicate to pause for a specified number of
		// seconds.
		else if (fileLine.length() >= 8 && fileLine.substring(0, 8).equals("/~pause:")) {
			answerPair.set("pause");
		}
		// The key phrase to assign a button to repeat text.
		else if (fileLine.length() >= 16 && fileLine.substring(0, 16).equals("/~repeat-button:")) {
			answerPair.set("repeat-button");
		}
		// The key phrase to signal that everything after that key phrase
		// will be repeated.
		else if (fileLine.length() >= 8 && fileLine.substring(0, 8).equals("/~repeat")) {
			answerPair.set("repeat");
		} else if (fileLine.length() >= 11 && fileLine.substring(0, 11).equals("/~endrepeat")) {
			answerPair.set("endrepeat");
		}
		// The key phrase to reset the action listeners of all of the
		// JButtons.
		else if (fileLine.length() >= 15 && fileLine.substring(0, 15).equals("/~reset-buttons")) {
			answerPair.set("reset-buttons");
		}
		// The key phrase to assign a button to skip to another part of the
		// scenario.
		else if (fileLine.length() >= 14 && fileLine.substring(0, 14).equals("/~skip-button:")) {
			answerPair.set("skip-button");
		}
		// The key phrase to clear the display of all of the braille cells.
		else if (fileLine.length() >= 15 && fileLine.substring(0, 15).equals("/~disp-clearAll")) {
			answerPair.set("disp-clearAll");
		}
		// The key phrase to set a Braille cell to a string.
		else if (fileLine.length() >= 17 && fileLine.substring(0, 17).equals("/~disp-cell-pins:")) {
			answerPair.set("disp-cell-pins:");
		}
		// The key phrase to represent a string in Braille.
		else if (fileLine.length() >= 14 && fileLine.substring(0, 14).equals("/~disp-string:")) {
			answerPair.set("disp-string");
		}
		// The key phrase to change the cell to represent a character in
		// Braille.
		else if (fileLine.length() >= 17 && fileLine.substring(0, 17).equals("/~disp-cell-char:")) {
			answerPair.set("disp-cell-char");
		}
		// The key phrase to raise a pin of the specified Braille cell.
		else if (fileLine.length() >= 18 && fileLine.substring(0, 18).equals("/~disp-cell-raise:")) {
			answerPair.set("disp-cell-raise");
		}
		// The key phrase to lower a pin of the specified Braille cell.
		else if (fileLine.length() >= 18 && fileLine.substring(0, 18).equals("/~disp-cell-lower:")) {
			answerPair.set("disp-cell-lower");
		}
		// The key phrase to clear a Braille cell.
		else if (fileLine.length() >= 18 && fileLine.substring(0, 18).equals("/~disp-cell-clear:")) {
			answerPair.set("disp-cell-clear");
		}
		// The key phrase to lower pins of the Braille cell.
		else if (fileLine.length() >= 21 && fileLine.substring(0, 21).equals("/~disp-cell-lowerPins")) {
			answerPair.set("disp-cell-lowerPins");
		}
		// The key phrase to wait for the program to receive a user's input.
		else if (fileLine.length() >= 12 && fileLine.substring(0, 12).equals("/~user-input")) {
			answerPair.set("user-input");
		}
		// Anything other than the specified commands above, is to be
		// interpreted as text that
		// will be spoken for the user to hear.
		else {
			answerPair.set("speak");
		}

		return answerPair;

	}
	
	
	/**
	 * This method checks if the phrase of certain type has a sensible argument. 
	 * 
	 *  This method check:
	 *  	1. if a phrase has syntactic validity.
	 *  ( For example, there are only 3 buttons but reapeat button
	 *   is pointing at 100th button. )
	 *   
	 *   A phrase is valid if and only if it has 
	 * @param phrase
	 * 			A Phrase to check its validity.
	 * @return
	 */
	private static boolean isThisPhraseValid (Phrase phrase) {
		
	}